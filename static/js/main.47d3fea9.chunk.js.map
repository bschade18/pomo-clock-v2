{"version":3,"sources":["components/Clock.js","components/SessionLength.js","components/ControlClock.js","App.js","serviceWorker.js","index.js"],"names":["Clock","props","id","className","timerLabel","clock","SessionLength","breakLength","onClick","breakDecrement","breakIncrement","sessionLength","sessionDecrement","sessionIncrement","ControlClock","startPause","reset","App","minutes","Math","floor","state","timer","seconds","start","setState","clearInterval","intervalID","startCountdown","pauseBeep","setInterval","countdown","switchSession","playBeep","document","getElementById","play","beep","pause","currentTime","this","src","preload","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47d3fea9.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Clock(props) {\n  return (\n    <div>\n      <br />\n      <h1 id=\"title\" className=\"heading\">\n        Pomodoro Clock\n      </h1>\n      <p id=\"timer-label\" className=\"heading\">\n        {props.timerLabel}\n      </p>\n      <div id=\"time-left\">{props.clock}</div>\n    </div>\n  );\n}\n\nexport default Clock;\n","import React from \"react\";\n\nfunction SessionLength(props) {\n  return (\n    <div className=\"row\">\n      <div className=\"col-6\">\n        <p id=\"break-label\" className=\"interval-label\">\n          Break Length\n        </p>\n        <p id=\"break-length\" className=\"interval-length\">\n          {props.breakLength}\n        </p>\n        <div className=\"interval-btn-container\">\n          <p\n            id=\"break-decrement\"\n            className=\"interval-btn\"\n            onClick={props.breakDecrement}\n          >\n            <i className=\"fas fa-minus\"></i>\n          </p>\n          <p\n            id=\"break-increment\"\n            className=\"interval-btn\"\n            onClick={props.breakIncrement}\n          >\n            <i className=\"fas fa-plus\"></i>\n          </p>\n        </div>\n      </div>\n      <div className=\"col-6\">\n        <p id=\"session-label\" className=\"interval-label\">\n          Session Length\n        </p>\n        <p id=\"session-length\" className=\"interval-length\">\n          {props.sessionLength}{\" \"}\n        </p>\n        <div className=\"interval-btn-container\">\n          <p\n            id=\"session-decrement\"\n            className=\"interval-btn\"\n            onClick={props.sessionDecrement}\n          >\n            <i className=\"fas fa-minus\"></i>\n          </p>\n          <p\n            id=\"session-increment\"\n            className=\"interval-btn\"\n            onClick={props.sessionIncrement}\n          >\n            <i className=\"fas fa-plus\"></i>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SessionLength;\n","import React from \"react\";\n\nfunction ControlClock(props) {\n  return (\n    <div className=\"row\">\n      <div className=\"col-12\">\n        <div className=\"controls-container\">\n          <div\n            id=\"play-pause-btn\"\n            className=\"control-btn\"\n            onClick={props.startPause}\n          >\n            <i className=\"fa fa-play\"></i>\n            <i className=\"fa fa-pause\"></i>\n          </div>\n          <div id=\"reset-btn\" className=\"control-btn\" onClick={props.reset}>\n            <i className=\"fas fa-undo\"></i>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ControlClock;\n","import React from \"react\";\nimport \"./App.css\";\nimport Clock from \"./components/Clock\";\nimport SessionLength from \"./components/SessionLength\";\nimport ControlClock from \"./components/ControlClock\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timerLabel: \"Session\",\n      breakLength: 5,\n      sessionLength: 25,\n      timer: 1500,\n      start: false,\n      intervalID: \"\"\n    };\n  }\n\n  clock = () => {\n    let minutes = Math.floor(this.state.timer / 60);\n    let seconds = this.state.timer - minutes * 60;\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\n    return minutes + \":\" + seconds;\n  };\n\n  startPause = () => {\n    if (!this.state.start) {\n      this.startCountdown();\n      this.setState({\n        start: true\n      });\n    } else {\n      this.setState({\n        start: false\n      });\n      clearInterval(this.state.intervalID);\n    }\n  };\n\n  reset = () => {\n    this.pauseBeep();\n    this.setState({\n      breakLength: 5,\n      sessionLength: 25,\n      timer: 1500,\n      start: false,\n      timerLabel: \"Session\"\n    });\n    clearInterval(this.state.intervalID);\n  };\n\n  startCountdown = () => {\n    this.setState({\n      intervalID: setInterval(() => {\n        this.countdown();\n        this.switchSession();\n      }, 1000)\n    });\n  };\n\n  countdown = () => {\n    this.setState({\n      timer: this.state.timer - 1\n    });\n  };\n\n  switchSession = () => {\n    if (this.state.timer < 0) {\n      if (this.state.timerLabel === \"Session\") {\n        this.setState({\n          timer: this.state.breakLength * 60,\n          timerLabel: \"Break\"\n        });\n        this.playBeep();\n      } else {\n        this.setState({\n          timer: this.state.sessionLength * 60,\n          timerLabel: \"Session\"\n        });\n        this.playBeep();\n      }\n    }\n  };\n\n  breakIncrement = () => {\n    const { breakLength, start } = this.state;\n\n    if (breakLength <= 59 && start === false) {\n      this.setState({\n        breakLength: breakLength + 1\n      });\n    }\n  };\n\n  breakDecrement = () => {\n    const { breakLength, start } = this.state;\n\n    if (breakLength >= 2 && start === false) {\n      this.setState({\n        breakLength: breakLength - 1\n      });\n    }\n  };\n\n  sessionIncrement = () => {\n    const { sessionLength, start, timer } = this.state;\n\n    if (sessionLength <= 59 && start === false) {\n      this.setState({\n        sessionLength: sessionLength + 1,\n        timer: timer + 60\n      });\n    }\n  };\n\n  sessionDecrement = () => {\n    const { sessionLength, start, timer } = this.state;\n\n    if (sessionLength >= 2 && start === false) {\n      this.setState({\n        sessionLength: sessionLength - 1,\n        timer: timer - 60\n      });\n    }\n  };\n\n  playBeep = () => {\n    const beep = document.getElementById(\"beep\");\n    beep.play();\n  };\n\n  pauseBeep = () => {\n    const beep = document.getElementById(\"beep\");\n    beep.pause();\n    beep.currentTime = 0;\n  };\n\n  render() {\n    return (\n      <div>\n        <Clock clock={this.clock()} timerLabel={this.state.timerLabel} />\n        <SessionLength\n          breakLength={this.state.breakLength}\n          breakIncrement={this.breakIncrement}\n          breakDecrement={this.breakDecrement}\n          sessionIncrement={this.sessionIncrement}\n          sessionDecrement={this.sessionDecrement}\n          sessionLength={this.state.sessionLength}\n        />\n        <ControlClock startPause={this.startPause} reset={this.reset} />\n        <audio id=\"beep\" src=\"https://goo.gl/65cBl1\" preload=\"auto\"></audio>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}