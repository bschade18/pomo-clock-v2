{"version":3,"sources":["components/ControlClock.js","components/SessionLength.js","components/Clock.js","App.js","serviceWorker.js","index.js"],"names":["ControlClock","class","id","onClick","this","props","startPause","reset","Component","SessionLength","breakLength","breakDec","breakInc","sessionLength","sessionDec","sessionInc","Clock","timerLabel","clock","App","minutes","Math","floor","state","timer","seconds","startCountdown","setState","intervalID","setInterval","countdown","clockUpdater","prevState","playBeep","start","clearInterval","pauseBeep","beep","document","getElementById","pause","currentTime","play","src","preload","React","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f747f8f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass ControlClock extends Component {\n  render() {\n    return (\n      <div>\n        <div class=\"row\">\n          <div class=\"col-12\">\n            <div class=\"start-reset-btn\">\n              <p id=\"start-stop\" onClick={this.props.startPause}>\n                <i class=\"fa fa-play\"></i>\n                <i class=\"fa fa-pause\"></i>\n              </p>\n              <p id=\"reset\" onClick={this.props.reset}>\n                <i class=\"fas fa-undo\"></i>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ControlClock;\n","import React, { Component } from \"react\";\n\nclass SessionLength extends Component {\n  render() {\n    return (\n      <div>\n        <div class=\"row\">\n          <div class=\"col-6\">\n            <p id=\"break-label\">Break Length</p>\n            <p id=\"break-length\">{this.props.breakLength}</p>\n            <div class=\"break-button\">\n              <p id=\"break-decrement\" onClick={this.props.breakDec}>\n                <i class=\"fas fa-minus\"></i>\n              </p>\n              <p id=\"break-increment\" onClick={this.props.breakInc}>\n                <i class=\"fas fa-plus\"></i>\n              </p>\n            </div>\n          </div>\n          <div class=\"col-6\">\n            <p id=\"session-label\">Session Length</p>\n            <p id=\"session-length\">{this.props.sessionLength}</p>\n            <div class=\"session-button\">\n              <p id=\"session-decrement\" onClick={this.props.sessionDec}>\n                <i class=\"fas fa-minus\"></i>\n              </p>\n              <p id=\"session-increment\" onClick={this.props.sessionInc}>\n                <i class=\"fas fa-plus\"></i>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SessionLength;\n","import React from \"react\";\n\nfunction Clock(props) {\n  return (\n    <div>\n      <br />\n      <h1 id=\"title\">Pomodoro Clock</h1>\n      <p id=\"timer-label\">{props.timerLabel}</p>\n      <div id=\"time-left\">{props.clock}</div>\n    </div>\n  );\n}\n\nexport default Clock;\n","import React from \"react\";\nimport \"./App.css\";\nimport ControlClock from \"./components/ControlClock\";\nimport SessionLength from \"./components/SessionLength\";\nimport Clock from \"./components/Clock\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timerLabel: \"Session\",\n      breakLength: 5,\n      sessionLength: 25,\n      timer: 1500,\n      start: false,\n      intervalID: \"\"\n    };\n  }\n\n  clock = () => {\n    let minutes = Math.floor(this.state.timer / 60);\n    let seconds = this.state.timer - minutes * 60;\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\n    return minutes + \":\" + seconds;\n  };\n\n  startCountdown = () => {\n    this.setState({\n      intervalID: setInterval(() => {\n        this.countdown();\n        this.clockUpdater();\n      }, 1000)\n    });\n  };\n\n  countdown = () => {\n    this.setState(prevState => {\n      return {\n        timer: prevState.timer - 1\n      };\n    });\n  };\n\n  clockUpdater = () => {\n    if (this.state.timer < 0) {\n      if (this.state.timerLabel === \"Session\") {\n        this.setState({\n          timer: this.state.breakLength * 60,\n          timerLabel: \"Break\"\n        });\n        this.playBeep();\n      } else {\n        this.setState({\n          timer: this.state.sessionLength * 60,\n          timerLabel: \"Session\"\n        });\n        this.playBeep();\n      }\n    }\n  };\n\n  breakInc = () => {\n    if (this.state.breakLength <= 59 && this.state.start === false) {\n      this.setState({\n        breakLength: this.state.breakLength + 1\n      });\n    }\n  };\n\n  breakDec = () => {\n    if (this.state.breakLength >= 2 && this.state.start === false) {\n      this.setState({\n        breakLength: this.state.breakLength - 1\n      });\n    }\n  };\n  sessionInc = () => {\n    if (this.state.sessionLength <= 59 && this.state.start === false) {\n      this.setState({\n        sessionLength: this.state.sessionLength + 1,\n        timer: this.state.timer + 60\n      });\n    }\n  };\n  sessionDec = () => {\n    if (this.state.sessionLength >= 2 && this.state.start === false) {\n      this.setState({\n        sessionLength: this.state.sessionLength - 1,\n        timer: this.state.timer - 60\n      });\n    }\n  };\n  startPause = () => {\n    if (this.state.start) {\n      this.setState({\n        start: false\n      });\n      clearInterval(this.state.intervalID);\n    } else {\n      this.startCountdown();\n      this.setState({\n        start: true\n      });\n    }\n  };\n\n  reset = () => {\n    this.pauseBeep();\n    this.setState({\n      breakLength: 5,\n      sessionLength: 25,\n      timer: 1500,\n      start: false,\n      timerLabel: \"Session\"\n    });\n    clearInterval(this.state.intervalID);\n  };\n\n  pauseBeep = () => {\n    const beep = document.getElementById(\"beep\");\n    beep.pause();\n    beep.currentTime = 0;\n  };\n\n  playBeep = () => {\n    const beep = document.getElementById(\"beep\");\n    beep.play();\n  };\n\n  render() {\n    return (\n      <div>\n        <Clock clock={this.clock()} timerLabel={this.state.timerLabel} />\n        <SessionLength\n          breakLength={this.state.breakLength}\n          breakInc={this.breakInc}\n          breakDec={this.breakDec}\n          sessionInc={this.sessionInc}\n          sessionDec={this.sessionDec}\n          sessionLength={this.state.sessionLength}\n        />\n        <ControlClock startPause={this.startPause} reset={this.reset} />\n        <audio id=\"beep\" src=\"https://goo.gl/65cBl1\" preload=\"auto\"></audio>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}